============General============
#Variables

#Declaration
int i;

#Assignment
i = 1;

#Initialisation
int i = 1;


===========Data Types===========
#Three Main Data Types
1. Primitive types
2. Reference types
3. Scalar types
4. Compounds

#Primitive Types
char, int, double, boolean, bye, short, long, float

How it works:
1. Stores actual values directly in memory
2. Fixed size

#Reference types
string, arraylist, object

How it works:
1. Stores references (memory address e.g. bankacc@9438839) to objects
2. Do not store actual data, but point to where it is located (address)

#Scalar types
int, double, char, boolean

How it works:
1. A subset of primitive types
2. Store actual values directly in memory
3. Single-value

#Compounds
arrays, maps, sets, etc

1. Made up of smaller parts (multiple scalars etc)

#Array
How it works:
1. Fixed no. of elements
2. Uses index to specify position
3. Indices start from 0
4. Uses .length() to get no. of elements in the array


Example:
board[x][y] = marker;


How it works:
1. Board is a 2D arrey, in a 10x10 game, it would be board[10][10]
2. x and y are indices for the two dimensions of the array
3. Syntax -- array[row][column]


===========Object-Oriented Programming (OOP)===========

#Classes
How it works:
1. Contains attributes (fields) and methods (functions)

#Objects
Class myClass = new Class();

How it works:
1. Objects are instances of classes (Instantiation)
    Instantiate an instance object called myClass //To use outside of "Class" class file
    Modify using other keywords or functions
2. A physical object, represents real-world concepts e.g. Person class to represent people 

#Access Modifiers
1. public -- accessible anywhere in the same program or outside
2. private -- accessible within same class, cannot be accessed directly outside of class (use methods) 
3. protected -- accessible within same class, subclasses and within same package


Example of Object:
// Create a new Person object
Person person1 = new Person("Alice", 30);

// Create another Person object
Person person2 = new Person("Bob", 25);

// Access the attributes of the objects
System.out.println("Person 1: Name = " + person1.getName() + ", Age = " + person1.getAge());
System.out.println("Person 2: Name = " + person2.getName() + ", Age = " + person2.getAge());


How it works:
1. Create new Person object
   Syntax: Class name = new Class(parameters);
2. Get value of objs person1 and person2 with get() method

##Encapsulation
Bundle fields and methods into a class


public class Person {
    // Attributes (fields)
    private String name;
    private int age;

    // Constructor to create Person objects
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Methods
    public void greet() {
        System.out.println("Hello, my name is " + name + " and I am " + age + " years old.");
    }
}
^above code is generated by ChatGPT, to be re-written later


##Inheritance


//extends keyword creates subclasses
public class Student extends Person {
    // Additional fields specific to students (Associated together in the same system)
    // Relationship: Person -> Student

    private int studentId;

    // Constructor for Student
    public Student(String name, int age, int studentId) {
        //Use super keyword when it is not the class with the main.arg
        super(name, age); // Call the constructor of the superclass (Person)
        this.studentId = studentId;
    }

    // Additional methods specific to students
    public void study() {
        System.out.println(name + " is studying.");
    }
}
^above code is generated by ChatGPT, to be re-written later

##Polymorphism


// Method overriding
@Override
public void greet() {
    System.out.println("Hello, I am a student named " + name + " with student ID " + studentId + ".");
}

// Method overloading
public void greet(String message) {
    System.out.println(message);
}
^above code is generated by ChatGPT, to be re-written later

How it works:
1. Polymorphism = many fromServer
2. Allow objects of different classes to be treated as objs from "parent"/superclass
3. Either by overriding or overloading

##Abstraction
... dont understand yet, to be written later

How it works:
--


===========Methods and Constructors===========

#Methods


//Method overloading, 1 method contains multiple methods with the same name
//Different method signatures (different data types or no. of parameters/args)
public void addMoney(String p1, double p2) {
    ...
}

public void addMoney (String p1) {

}

How it works:
1. Not based on access modifiers 


#Constructors
//Constructor, 1 constructor contains multiple constructors with the same name
//usually used for initialising objects outside of their class, makes classes more flexible to use
//Overloaded, different method signature (no. of parameters/args)
public addMoney() { //No parameters
    ...
}

public addMoney(String p1, Integer p2) { //Two parameters
    ...
}


#this Keyword
balance = this.balance;

How it works:
1. Initialise one constructor or variable outside of their block or class 


===========Control Flow==========

#if Statement


if(condition) {
    ...
}


How it works:
1. if condition is true/false (boolean), run these actions
2. else/else if, run other actions


#While Statement


while(i <= 5){
    System.out.println(i); 
    i++;
}


How it works:
1. While(condition), continue loop
2. continue; or break; to end the loop
3. Loop needs to be closed

Notes:
1. continue; skip the rest of the loop and iterate again
2. break; end the loop


#For Loop


Example 1:
for (int i = 1; i <= 5; i++) {
    System.out.println("Iteration: " + i);
}



How it works:
1. Initialisation:  int i = 1, acts as the loop control to keep track of current iteration
2. Condition: i <= 5, specifies condition that must be true to run loop
3. Update Iteration: i++, update after each iteration 


Example 2:
List<String>q = new LinkedList<>();
q.add(1, "hello");
q.add(2, "orange"); 

int i = 1;
for (String item : q) {
System.out.println(item);
i++;
}


How it works:
1.  Loop starts at element i (value of 1), passes through collection List q,
    item = "hello";
2.  Print item //Expected "hello" printed to console
3.  Loop starts at element i+1 (value of 1+1), iterates through collection List q again,
4.  item = "orange";
5.  Print item // Expected "orange";
6.  Repeat until loop reaches end of the list (null)


===========Collections==========
#List

Example:
List<String> q = new LinkedList<>();


How it works --- List:
1. Ordered
2. Starts from 1

How it works --- ArrayList:
1. Ordered
2. Duplicates allowed
3. Starts from 0 (array)


#Stack

Syntax:
Deque<Integer> stack = new ArrayDeque<>();

OR

Stack<Integer> stack2 = new Stack<>();


Deque<Integer> stack = new ArrayDeque<>();

   //Add and pushes 5 to the first of the queue
   stack.push(5);
   //Removes 5 and return as Integer Object
   stack.pop();
   //Look at top of the stack without removing it, returns Integer Object
   stack.peek();

   System.out.println(stack.peek());

System.out.println(stack.peek()); //Expected 1 printed


How it works
1. Ordered
2. Duplicates allowed
3. FIFO(First in first out)
4. LIFO(Last in first out)
5. Returns Integer Objects, not primitive data types (Values are not assigned directly)


#Set

Syntax:
Set<String> set = new HashSet<K>();

How it works
1. Unordered
2. No duplicates
3. Print using for loop, order is not guaranteed


#Map

Syntax:
Map<String, Object> map = new HashMap<K,V>();

How it works:
1. Unordered
2. No duplicates
3. Each key is mapped to a value, as a pair
4. Stores keys and values as Objects
5. Can store Nulls


#Map Operations


Example 1:
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
List<Integer> squaredNumbers = numbers.stream()
//.map and .collect are functions, these are treated as args
    //.map(i -> i * i) is considered a lambda expression
    //i*i = squares i
    .map(i -> i * i)
    //collect elements and add to list 
    .collect(Collectors.toList());
^above code is generated by ChatGPT, to be re-written later


How it works:
1. Good for transforming each element/data in the stream into another form
2. Allows filters to select elements based on conditions (returns boolean value)


Example 2:
List<Integer> filteredNumbers = numbers.stream()
    //collect numbers greater than 2 and add to list
    .filter(i -> i > 2)
    .collect(Collectors.toList());


#Lambda

.map(i -> i*i) //no semi colon needed except for last operation(?)
.collect(Collectors.toList()); 

How it works:
1. Create anonymous functions
2. Structure -- Function<T, R>
                Function<Type, Result>
                .map(i -> i  *i)
                e.g. (i -> i * i), reads left to right //-> is a token

3. The (i -> i*i) operation is applied to every element of the stream


===========I/O, Reader and Writer==========

#Reader

How it works:
1. Reads character streams (Needs Input stream)

Types:
FileReader -- Reads a character stream from a file
BufferedReader -- Buffers the stream for efficiency, no need to convert from bytes -> char every iteration
ByteReader -- Reads a byte-input 


#Writer

How it works:
1. Writes to chracter stream (Needs Output stream)

Types:
1. FileWriter -- Writes to a file from a character stream
2. BufferedWriter -- Buffers the stream for efficiency, no need to convert from bytes -> char every iteration


#I/O

#Input

Examples:
1. FileInputStream
2. InputStreamReader (bytes -> character stream)


#Output

Examples:
1. FileOutputStream
2. OutputStreamReader


===============Networking==============

#Server


Example:
int port = 3000; //localhost
try (ServerSocket serverSocket = new ServerSocket(port)) {
    System.out.println("Server is listening on port " + port);
    while (true) {
        //A blocking call, it will wait until there is incoming connection
        //.accept method receives connection request from client
        //Code after accept() call will not run until client connects and accept() method is returned

        //Server -> serverSocket
        //          socket       <- Client1
        //          socket       <- Client2

        try (Socket socket = serverSocket.accept();
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true)) {
            out.println("Hello from the server!");
             }
        }
    }

^above code is generated by ChatGPT, to be re-written later


#Client


Example:
String hostname = "localhost";
        int port = 1234;

        try (Socket socket = new Socket(hostname, port);
        //Readers are connected to the socket

        //Server ->   serverSocket
        //            socket          <- Client1
        //            BufferedReader   

             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {
            String fromServer = in.readLine();
            System.out.println("Server: " + fromServer);
         }

^above code is generated by ChatGPT, to be re-written later


How it works:
1. Server listens on port 3000 through the ServerSocket (server side), clients use socket to connect to server 
2. Server waits for incoming connection with accept()
3. Client sends a request to connect to server via port 3000, accept() returns, rest of the code will run
4. Server will wait indefinitely until accept method returns
5. One ServerSocket can accept multiple connections from different clients 

#Socket

How it works:
1. All read, write, I/O etc are attached to the socket in order to send and receive data to/from the server
2. Connection must be sent successfully for data to be sent and received


===========Testing, Exceptions==========


#Try

#Try block
try {
    ...
} catch {
    ...
} finally {
    ...
}

How it works:
1. Run the try block where you think the exc (Exception) will occur
2. Catch specific exception thrown (check documentation for it)
3. Finally keyword whether exc occurs or not 

#Try with resource


[Main]
try (FileReader fr = new FileReader(args[0])) throws Exception {
    fr.readLine();
} // The resource is automatically closed here

[MyResources]
public class MyResources implements AutoCloseable {
    @Override
    public void close() {
        System.out.println(resourceName + " closed.");
    }
}


How it works:
1. Create two class files, Main and MyResources (Where the AutoCloseable is implemented)
2. Write an Override method for close within MyResources class
3. Write try with parentheseses try(...) 





(c) mchllx github 2023